predict_testlm <- predict(linear2, newdata = house_test)
house_test %>%
ggplot(aes(predict, SalePrice)) +
geom_point() +
geom_smooth()
rmse(house_test$SalePrice, house_test$predict)
## Now lets fit an additive model
df1 <- c("MSZoning", "Neighborhood", "MSSubClass", "Condition1", "Condition2", "HouseStyle", "OverallQual",
"OverallCond", "ExterCond", "GarageType", "PoolQC", "YrSold", "MoSold", "SaleCondition",
"Fireplaces", "GarageCars", "Baths")
df2 <- c("YearBuilt", "LotFrontage", "LotArea", "YearBuilt", "YearRemodAdd", "MasVnrArea", "BsmtFinSF1",
"TotalBsmtSF", "stFlrSF","GrLivArea",
"TotRmsAbvGrd", "GarageArea")
var1 <- paste(df1, collapse=" + ")
var2 <- paste('s(', df2[-1], ')', sep = "", collapse = ' + ')
fm <- as.formula(paste("SalePrice ~", var1, "+", var2))
spline1 <- gam(fm, data = house_train)
predict_trainspline <- predict(spline1)
predict_testspline <- predict(spline1, newdata = house_test)
rmse(house_train$SalePrice,house_train$predicted_spline)
house_train %>%
ggplot(aes(predicted_spline, SalePrice)) +
geom_point() +
geom_smooth()
rmse(house_test$SalePrice,house_test$predicted_spline)
house_test %>%
ggplot(aes(predicted_spline, SalePrice)) +
geom_point() +
geom_smooth()
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
rf_spec
rf_fit <- rf_spec %>%
fit(SalePrice ~ . - Id -predict,
data = house_train)
rf_fit
house_train$predict_rf <- predict(rf_fit)
result_train <- rf_fit %>%
predict(new_data = house_train) %>%
mutate(actual = house_train$SalePrice)
result_train %>%
ggplot(aes(.pred, actual))+
geom_point()
rmse(result_train$actual, result_train$.pred)
result_test <- rf_fit %>%
predict(new_data = house_test) %>%
mutate(actual = house_test$SalePrice)
result_test %>%
ggplot(aes(.pred, actual))+
geom_point()
rmse(result_test$actual, result_test$.pred)
house_folds <- vfold_cv(house_train, strata = Utilities) # This divides our house_train in 10 parts
rf_res <- fit_resamples(
rf_spec, #The specification
SalePrice ~ . - Id - predict,
house_folds, #Resamples
control = control_resamples(save_pred = TRUE) #To fine tune the resampling process
)
rf_res %>%
collect_metrics()
rf_res %>%
unnest(.predictions) %>%
ggplot(aes(SalePrice, .pred, color = id)) +
geom_abline(lty = 2, color = "black", size = 1) +
geom_point(alpha = 0.5)
lm_spec <- linear_reg () %>%
set_engine( engine ="lm")
lm_spec
lm_fit <- lm_spec %>%
fit(SalePrice ~ . -Id - predict,
data = house_train)
lm_fit
lm_res <- fit_resamples(
lm_spec, #The specification
SalePrice ~ . -Id - predict,
house_folds, #Resamples
control = control_resamples(save_pred = TRUE) #To fine tune the resampling process
)
lm_res %>%
collect_metrics()
lm_res %>%
unnest(.predictions) %>%
ggplot(aes(SalePrice, .pred, color = id)) +
geom_abline(lty = 2, color = "black", size = 1) +
geom_point(alpha = 0.5)
### Preparing test data
test <- readr::read_csv("test.csv")
house_test <- test %>%
mutate(
MSZoning = as.factor(MSZoning),
Street = as.factor(Street),
Alley = as.factor(Alley),
LotShape = as.factor(LotShape),
LandContour = as.factor(LandContour),
Utilities = as.factor(Utilities),
LotConfig = as.factor(LotConfig),
LandSlope = as.factor(LandSlope),
Neighborhood = as.factor(Neighborhood),
Condition1 = as.factor(Condition1),
Condition2 = as.factor(Condition2),
BldgType = as.factor(BldgType),
HouseStyle = as.factor(HouseStyle),
OverallQual = as.factor(OverallQual),
OverallCond = as.factor(OverallCond),
RoofStyle = as.factor(RoofStyle),
RoofMatl = as.factor(RoofMatl),
Exterior1st = as.factor(Exterior1st),
Exterior2nd = as.factor(Exterior2nd),
MasVnrType = as.factor(MasVnrType),
ExterQual = as.factor(ExterQual),
ExterCond = as.factor(ExterCond),
Foundation = as.factor(Foundation),
BsmtQual = as.factor(BsmtQual),
BsmtCond = as.factor(BsmtCond),
BsmtExposure = as.factor(BsmtExposure),
BsmtFinType1 = as.factor(BsmtFinType1),
BsmtFinType2 = as.factor(BsmtFinType2),
Heating = as.factor(Heating),
HeatingQC = as.factor(HeatingQC),
CentralAir = as.factor(CentralAir),
Electrical = as.factor(Electrical),
KitchenQual = as.factor(KitchenQual),
Functional = as.factor(Functional),
FireplaceQu = as.factor(FireplaceQu),
GarageType = as.factor(GarageType),
GarageFinish = as.factor(GarageFinish),
GarageQual = as.factor(GarageQual),
GarageCond = as.factor(GarageCond),
PavedDrive = as.factor(PavedDrive),
PoolQC = as.factor(PoolQC),
Fence = as.factor(Fence),
MiscFeature = as.factor(MiscFeature),
MoSold = as.factor(MoSold),
YrSold = as.factor(YrSold),
SaleType = as.factor(SaleType),
SaleCondition = as.factor(SaleCondition))
house_test$LotFrontage[is.na(house_test$LotFrontage)] <- round(mean(house_test$LotFrontage, na.rm=TRUE))
summary(house_test$LotFrontage)
house_test$MSSubClass <- ifelse(house_test_ready$MSSubClass == 150, 120, house_test_ready$MSSubClass)
summary(house_test$MSSubClass)
for (i in factor_list) {
house_test[[i]] <- na_to_none(house_test[[i]])
}
summary(house_test)
colnames(house_test)[colSums(is.na(house_test)) > 0]
## For GarageYrBlt I assume a NA means No garage but we can visualize it
garage <- house_test %>%
select(GarageType, GarageYrBlt)
DT::datatable(filter(garage, garage$GarageType == "None"))
str(house_test$GarageYrBlt)
house_test$GarageYrBlt[is.na(house_test$GarageYrBlt)] <- 0
## For MasVnrType we can do substitute the Na's by nones and for the area by 0's
house_test$MasVnrType[is.na(house_test$MasVnrType)] <- "None"
summary(house_test$MasVnrType)
house_test$MasVnrArea[is.na(house_test$MasVnrArea)] <- 0
colnames(house_test)[colSums(is.na(house_test)) > 0]
## For MSZoning we use the most common zone RL
house_test$MSZoning[is.na(house_test$MSZoning)] <- "RL"
## Utilities is problematic. I think AllPub is the best solution
summary(house_test$Utilities)
## Creating the Baths variables so we can remove all of the others.
house_test <- house_test %>%
mutate(Baths = 0.5*(HalfBath) + FullBath + 0.5*(BsmtHalfBath) + BsmtFullBath)
## For Sale Type its only one observation missing so we can substitute it
## with the most common WD
house_test$SaleType[is.na(house_test$SaleType)] <- "WD"
## Same with Functional and the rest of the categorical variables
house_test$Functional[is.na(house_test$Functional)] <- "Typ"
house_test$Exterior1st[is.na(house_test$Exterior1st)] <- "VinylSd"
house_test$Exterior2nd[is.na(house_test$Exterior2nd)] <- "VinylSd"
house_test$KitchenQual[is.na(house_test$KitchenQual)] <- "TA"
## For the numerical we substitute them for the mean or median value
house_test$BsmtFinSF1[is.na(house_test$BsmtFinSF1)] <- round(mean(house_test$BsmtFinSF1, na.rm=TRUE))
house_test$Baths[is.na(house_test$Baths)] <- median(house_test$Baths, na.rm=TRUE)
house_test$TotalBsmtSF[is.na(house_test$TotalBsmtSF)] <- round(mean(house_test$TotalBsmtSF, na.rm=TRUE))
house_test$GarageCars[is.na(house_test$GarageCars)] <- median(house_test$GarageCars, na.rm=TRUE)
house_test$stFlrSF <- house_test$`1stFlrSF`
house_test$ndFlrSF <- house_test$`2ndFlrSF`
house_test$SsnPorch <- house_test$`3SsnPorch`
house_test_ready <- house_test %>%
select(-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - `3SsnPorch`, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities)
sum(is.na(house_test_ready))
house_test_ready$MSSubClass <- ifelse(house_test_ready$MSSubClass == 150, 120, house_test_ready$MSSubClass)
summary(linear1)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`)
summary(house_ready)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
predict(linear1, newdata = house_test_ready)
plot(predict(linear1, newdata = house_test_ready))
summary(plot(predict(linear1, newdata = house_test_ready)))
prediction_test <- predict(linear1, newdata = house_test_ready)
summary(prediction_test)
house_test_ready$prediction_lm1 <- predict(linear1, newdata = house_test_ready)
submission_lm1 <- house_test_ready %>%
select(Id, prediction_lm1)
submission_lm1 <- house_test_ready %>%
mutate(prediction_lm1 = SalePrice) %>%
select(Id, Sale)
submission_lm1 <- house_test_ready %>%
mutate(prediction_lm1 = SalePrice) %>%
select(Id, SalePrice)
submission_lm1 <- house_test_ready %>%
rename(SalePrice = prediction_lm1) %>%
select(Id, SalePrice)
write.csv(submission_lm1, "C:\\Users\\Daniel Gutierrez\\Desktop\\R Practice\\House Price\\submission_lm1.csv",
row.names = FALSE)
write.csv(submission_lm1, "C:\\Users\\Daniel Gutierrez\\Desktop\\R Practice\\House Prices\\submission_lm1.csv",
row.names = FALSE)
summary(linear1)
linear1 <- lm(SalePrice~. - Id -LotFrontage, -Alley -Exterior1 -Exterior2, -ExterQual
-ExterCond -Foundation -Heating, data = house_ready)
linear1 <- lm(SalePrice~. - Id -LotFrontage -Alley -Exterior1 -Exterior2, -ExterQual
-ExterCond -Foundation -Heating, data = house_ready)
linear1 <- lm(SalePrice~. - Id -LotFrontage -Alley -Exterior1 -Exterior2 -ExterQual
-ExterCond -Foundation -Heating, data = house_ready)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1, -Exterior2
,-ExterQual, -ExterCond, -Foundation, -Heating)
names(house)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
summary(linear1)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeatures,-MoSold)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeature,-MoSold)
summary(house_ready)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
summary(linear1)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeature,-MoSold, -YrSold, -SaleType)
summary(house_ready)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
summary(linear1)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeature,-MoSold, -YrSold, -SaleType,
-Street, -LandContour)
summary(house_ready)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
summary(linear1)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeature,-MoSold, -YrSold, -SaleType,
-Street, -LandContour, -CentralAir, -Heating)
summary(house_ready)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
summary(linear1)
house_test_ready <- house_test %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeature,-MoSold, -YrSold, -SaleType,
-Street, -LandContour, -CentralAir, -Heating)
sum(is.na(house_test_ready))
house_test_ready$prediction_lm1 <- predict(linear1, newdata = house_test_ready)
submission_lm1 <- house_test_ready %>%
rename(SalePrice = prediction_lm1) %>%
select(Id, SalePrice)
write.csv(submission_lm1, "C:\\Users\\Daniel Gutierrez\\Desktop\\R Practice\\House Prices\\submission_lm1.csv",
row.names = FALSE)
house_ready %>%
ggplot(aes(predict, SalePrice)) +
geom_point()
house_ready$predict <- predict(linear1)
house_ready %>%
ggplot(aes(predict, SalePrice)) +
geom_point()
house_split <- house_ready %>%
initial_split()
house_train <- training(house_split)
house_test <- testing(house_split)
linear2 <- lm(SalePrice~. - Id - Street - CentralAir, data = house_train)
linear2 <- lm(SalePrice~. - Id - predict, data = house_train)
predict_trainlm <- predict(linear2)
house_train %>%
ggplot(aes(predict, SalePrice)) +
geom_point() +
geom_smooth()
# Still good
# RMSE?
rmse <- function(actual,predicted) {
error = actual - predicted
se = error^2
mse = mean(se)
rmse = sqrt(mse)
return(rmse)
}
rmse(house_train$SalePrice, house_train$predict)
predict_testlm <- predict(linear2, newdata = house_test)
house_test %>%
ggplot(aes(predict, SalePrice)) +
geom_point() +
geom_smooth()
rmse(house_test$SalePrice, house_test$predict)
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
rf_spec
rf_fit <- rf_spec %>%
fit(SalePrice ~ . - Id -predict,
data = house_train)
rf_fit
house_train$predict_rf <- predict(rf_fit)
result_train <- rf_fit %>%
predict(new_data = house_train) %>%
mutate(actual = house_train$SalePrice)
result_train %>%
ggplot(aes(.pred, actual))+
geom_point()
result_test %>%
ggplot(aes(.pred, actual))+
geom_point()
result_test <- rf_fit %>%
predict(new_data = house_test) %>%
mutate(actual = house_test$SalePrice)
result_test %>%
ggplot(aes(.pred, actual))+
geom_point()
rmse(result_test$actual, result_test$.pred)
rmse(result_train$actual, result_test$.pred)
rmse(result_train$actual, result_train$.pred)
house_folds <- vfold_cv(house_train, strata = Utilities) # This divides our house_train in 10 parts
rf_res <- fit_resamples(
rf_spec, #The specification
SalePrice ~ . - Id - predict,
house_folds, #Resamples
control = control_resamples(save_pred = TRUE) #To fine tune the resampling process
)
house_folds <- vfold_cv(house_train) # This divides our house_train in 10 parts
rf_res <- fit_resamples(
rf_spec, #The specification
SalePrice ~ . - Id - predict,
house_folds, #Resamples
control = control_resamples(save_pred = TRUE) #To fine tune the resampling process
)
rf_res %>%
collect_metrics()
rf_res %>%
unnest(.predictions) %>%
ggplot(aes(SalePrice, .pred, color = id)) +
geom_abline(lty = 2, color = "black", size = 1) +
geom_point(alpha = 0.5)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
filter(SalePrice < 650000) %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeature,-MoSold, -YrSold, -SaleType,
-Street, -LandContour, -CentralAir, -Heating)
summary(house_ready)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
summary(linear1)
house_test_ready$prediction_lm1 <- predict(linear1, newdata = house_test_ready)
submission_lm1 <- house_test_ready %>%
rename(SalePrice = prediction_lm1) %>%
select(Id, SalePrice)
write.csv(submission_lm1, "C:\\Users\\Daniel Gutierrez\\Desktop\\R Practice\\House Prices\\submission_lm1.csv",
row.names = FALSE)
set.seed(1234)
house_split <- house_ready %>%
initial_split()
house_train <- training(house_split)
house_test <- testing(house_split)
linear2 <- lm(SalePrice~. - Id - predict, data = house_train)
summary(linear2)
predict_trainlm <- predict(linear2)
house_train %>%
ggplot(aes(predict, SalePrice)) +
geom_point() +
geom_smooth()
rf_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
rf_spec
rf_fit <- rf_spec %>%
fit(SalePrice ~ . - Id -predict,
data = house_train)
summary(house_Train)
summary(house_train)
rf_fit <- rf_spec %>%
fit(SalePrice ~ . - Id -predict,
data = house_train)
rf_fit <- rf_spec %>%
fit(SalePrice ~ . - Id,
data = house_train)
rf_fit
result_train <- rf_fit %>%
predict(new_data = house_train) %>%
mutate(actual = house_train$SalePrice)
result_train %>%
ggplot(aes(.pred, actual))+
geom_point()
rmse(result_train$actual, result_train$.pred)
result_test <- rf_fit %>%
predict(new_data = house_test) %>%
mutate(actual = house_test$SalePrice)
result_test %>%
ggplot(aes(.pred, actual))+
geom_point()
rmse(result_train$actual, result_train$.pred)
rmse(result_test$actual, result_test$.pred)
house_folds <- vfold_cv(house_train) # This divides our house_train in 10 parts
rf_res <- fit_resamples(
rf_spec, #The specification
SalePrice ~ . - Id,
house_folds, #Resamples
control = control_resamples(save_pred = TRUE) #To fine tune the resampling process
)
rf_res %>%
collect_metrics()
rf_res %>%
unnest(.predictions) %>%
ggplot(aes(SalePrice, .pred, color = id)) +
geom_abline(lty = 2, color = "black", size = 1) +
geom_point(alpha = 0.5)
hist(house_test$SalePrice)
summary(house_test$SalePrice)
## Adding variables that seems to affect SalePrice
house_ready <- house %>%
filter(SalePrice < 600000) %>%
select(-MSSubClass,-LotShape, -MiscVal, -PoolArea, -ScreenPorch, - SsnPorch, -EnclosedPorch, -OpenPorchSF,
-WoodDeckSF, -GarageYrBlt, -KitchenAbvGr, -BedroomAbvGr, -LowQualFinSF, -ndFlrSF,
-BsmtUnfSF, -BsmtFinSF2, -HalfBath, -FullBath, -BsmtHalfBath, -BsmtFullBath, -`1stFlrSF`,
`2ndFlrSF`, - GarageArea, -Utilities,  - `3SsnPorch`, -LotFrontage, -Alley, -Exterior1st, -Exterior2nd
,-ExterQual, -ExterCond, -Foundation, -Heating, -Fence, -MiscFeature,-MoSold, -YrSold, -SaleType,
-Street, -LandContour, -CentralAir, -Heating)
summary(house_ready)
linear1 <- lm(SalePrice~. - Id, data = house_ready)
summary(linear1)
house_test_ready$prediction_lm1 <- predict(linear1, newdata = house_test_ready)
submission_lm1 <- house_test_ready %>%
rename(SalePrice = prediction_lm1) %>%
select(Id, SalePrice)
write.csv(submission_lm1, "C:\\Users\\Daniel Gutierrez\\Desktop\\R Practice\\House Prices\\submission_lm1.csv",
row.names = FALSE)
house_split <- house_ready %>%
initial_split()
house_train <- training(house_split)
house_test <- testing(house_split)
lm_spec <- linear_reg() %>%
set_engine( engine ="lm")
lm_spec
lm_fit <- lm_spec %>%
fit(SalePrice ~ . -Id,
data = house_train)
lm_fit
lm_res <- fit_resamples(
lm_spec, #The specification
SalePrice ~ . -Id - predict,
house_folds, #Resamples
control = control_resamples(save_pred = TRUE) #To fine tune the resampling process
)
lm_res <- fit_resamples(
lm_spec, #The specification
SalePrice ~ . -Id,
house_folds, #Resamples
control = control_resamples(save_pred = TRUE) #To fine tune the resampling process
)
lm_res %>%
collect_metrics()
lm_res %>%
unnest(.predictions) %>%
ggplot(aes(SalePrice, .pred, color = id)) +
geom_abline(lty = 2, color = "black", size = 1) +
geom_point(alpha = 0.5)
length(linear1$coefficients) > linear1$rank
rf_res %>%
collect_metrics()
write.csv(house_ready, "C:\\Users\\Daniel Gutierrez\\Desktop\\R Practice\\House Prices\\houseprices.csv", row.names = FALSE)
